generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  name                 String?
  password             String?              // Hashed password
  stripeCustomerId     String?              @unique
  subscriptionStatus   String?
  subscriptionId       String?              @unique
  subscriptionPlan     String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  scans                Scan[]
  monitoringPreferences MonitoringPreference?

  @@index([email])
  @@index([stripeCustomerId])
}

model Scan {
  id              String          @id @default(cuid())
  userId          String
  targetUrl       String
  status          String
  results         Json?
  startedAt       DateTime        @default(now())
  completedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  vulnerabilities Vulnerability[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Vulnerability {
  id          String   @id @default(cuid())
  scanId      String
  severity    String
  title       String
  description String
  cve         String?
  cvss        Float?
  affected    String?
  solution    String?
  aiAnalysis  Json?
  createdAt   DateTime @default(now())
  scan        Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([scanId])
  @@index([severity])
  @@index([cve])
}

model MonitoringPreference {
  id                  String              @id @default(cuid())
  userId              String              @unique
  enabled             Boolean             @default(false)
  frequency           MonitoringFrequency @default(WEEKLY)
  notifyEmail         Boolean             @default(true)
  notifyOnNewVulns    Boolean             @default(true)
  notifyOnChanges     Boolean             @default(true)
  lastScanAt          DateTime?
  nextScanAt          DateTime?
  monitoredDomains    MonitoredDomain[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([enabled])
  @@index([nextScanAt])
}

model MonitoredDomain {
  id                   String               @id @default(cuid())
  domain               String
  monitoringPreferenceId String
  lastScanId           String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  monitoringPreference MonitoringPreference @relation(fields: [monitoringPreferenceId], references: [id], onDelete: Cascade)

  @@unique([domain, monitoringPreferenceId])
  @@index([domain])
}

enum MonitoringFrequency {
  DAILY
  WEEKLY
  MONTHLY
}
